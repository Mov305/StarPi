generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  address       Json
  role          String    @default("user")
  cart          Json[]
  Orders        Json[]
  wishlist      Json[]
  phone         String
}

model Products {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  description    String?
  properties     Json[]
  price          Float?
  image          String?
  images         String[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  category       String[]
  subCategory    String[]
  color          String[]
  quantity       Int
  discount       Int
  rating         Int
  reviews        Json[]
  isPopular      Boolean
  isRecommended  Boolean
  isAvailable    Boolean
  isFreeShipping Boolean
}

model Category {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String?
  description String?
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  parent      String
  properties  Json[]
}

model Account {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  userId             String    @db.ObjectId
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationRequest {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}
